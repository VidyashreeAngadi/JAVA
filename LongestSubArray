Given an array arr[] containing integers and an integer k, your task is to find the length of the longest subarray where the sum of its elements is equal to the given value k. It is guaranteed that a valid subarray 
exists.
Examples:
Input: arr[] = [10, 5, 2, 7, 1, 9], k = 15
Output: 4
Explanation: The subarray [5, 2, 7, 1] has a sum of 15 and length 4.
Input: arr[] = [-1, 2, -3], k = -2
Output: 3
Explanation: The subarray [-1, 2, -3] has a sum of -2 and length 3.


class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
        // code here
         int maxCount=0;
         int count=0;
         int sum=0;
         Map<Integer,Integer>map=new HashMap<Integer,Integer>();
         map.put(0,-1);
         for(int i=0;i<arr.length;i++){
              sum +=arr[i];
              if(map.containsKey(sum-k)){
                 count = i-map.get(sum-k);
                 if(count>maxCount){
                     maxCount=count;
                 }
              }
              if(!map.containsKey(sum)){
                 map.put(sum,i);
              }
         }
         return maxCount;
    }
}
